import emoji
from aiogram import types
from aiogram.types import Message
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from loader import dp, bot
from tgbot.keyboards.main import keyboard

from tgbot.keyboards.support import support_keyboard, support_callback, check_support_available, get_support_manager, \
    cancel_support, cancel_support_callback


# @dp.message_handler(Command("support_call"))
async def ask_support_call(message: Message):
    text = "–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    kb = await support_keyboard(messages="many")
    await message.answer(text, reply_markup=kb)


# @dp.callback_query_handler(support_callb ack.filter(messages="many", as_user="yes"))
async def send_to_support_call(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.message.edit_text("–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!")

    user_id = int(callback_data.get("user_id"))
    if not await check_support_available(user_id):
        support_id = await get_support_manager()
    else:
        support_id = user_id

    if not support_id:
        await call.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.reset_state()
        return

    await state.set_state("wait_in_support")
    await state.update_data(second_id=support_id)

    kb = await support_keyboard(messages="many", user_id=call.from_user.id)

    await bot.send_message(support_id,
                           f"–° –≤–∞–º–∏ —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name}",
                           reply_markup=kb
                           )


# @dp.callback_query_handler(support_callback.filter(messages="many", as_user="no"))
async def answer_to_support_call(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    second_id = int(callback_data.get("user_id"))
    user_state = dp.current_state(user=second_id, chat=second_id)

    if str(await user_state.get_state()) != "wait_in_support":
        await call.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ–¥—É–º–∞–ª.")
        return

    await state.set_state("in_support")
    await user_state.set_state("in_support")

    await state.update_data(second_id=second_id)

    kb = cancel_support(second_id)
    keyboard_second_user = cancel_support(call.from_user.id)

    await call.message.edit_text("–í—ã –Ω–∞ —Å–≤—è–∑–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!\n"
                                 "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
                                 reply_markup=kb
                                 )
    await bot.send_message(second_id,
                           "–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞ —Å–≤—è–∑–∏! –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. \n"
                           "–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
                           reply_markup=keyboard_second_user
                           )


# @dp.message_handler(state="wait_in_support", content_types=types.ContentTypes.ANY)
async def not_supported(message: types.Message, state: FSMContext):
    data = await state.get_data()
    second_id = data.get("second_id")

    kb = cancel_support(second_id)
    await message.answer("–î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å–µ–∞–Ω—Å", reply_markup=kb)


# @dp.callback_query_handler(cancel_support_callback.filter(), state=["in_support", "wait_in_support", None])
async def exit_support(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    user_id = int(callback_data.get("user_id"))
    second_state = dp.current_state(user=user_id, chat=user_id)

    if await second_state.get_state() is not None:
        data_second = await second_state.get_data()
        second_id = data_second.get("second_id")
        if int(second_id) == call.from_user.id:
            await second_state.reset_state()
            await bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Å–µ–∞–Ω—Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏")

    await call.message.edit_text("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–µ–∞–Ω—Å")
    await state.reset_state()
    await call.message.answer_sticker(
        sticker="CAACAgIAAxkBAAEBI8NiqOKtCL6CGHjP6ZddTWavbnjcXwACXw8AAoMo-EsCNiHWZ-EzbSQE")
    await call.message.answer("–Ø –º–æ–≥—É —á–µ–º-—Ç–æ –µ—â–µ –ø–æ–º–æ—á—å?", reply_markup=keyboard)


def register_support(dp: dp):
    dp.register_message_handler(ask_support_call, lambda message: message.text == "ü¶∏‚Äç –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", state="*")
    dp.register_callback_query_handler(send_to_support_call, support_callback.filter(messages="many", as_user="yes"))
    dp.register_callback_query_handler(answer_to_support_call, support_callback.filter(messages="many", as_user="no"))
    dp.register_message_handler(not_supported, state="wait_in_support", content_types=types.ContentTypes.ANY)
    dp.register_callback_query_handler(exit_support, cancel_support_callback.filter(),
                                       state=["in_support", "wait_in_support", None])
